<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "dtd/document-v10.dtd">

<document>
  <header>
    <title>Avalon Framework - Guide - Patterns in Avalon</title>
    <authors>
      <person name="Berin Loritsch" email="bloritsch@apache.org"/>
      <person name="Leo simons" email="leosimons@apache.org"/>
      <person name="Paul Hammant" email="Paul_Hammant@yahoo.com"/>
      <person name="Peter Donald" email="peter at apache.org"/>
    </authors>
  </header>
  <body>
    <s1 title="Getting Started with Patterns">
      <p>
        Avalon takes many design patterns and architectural mindsets, and
        implements the best ones for Servers.  There are different kinds of
        patterns that represent different aspects of Avalon. Avalon uses four
        main conceptual patterns called Separation of Interface and
        Implementation, Inversion of Control, Multi-Dimensional Separation
        of Concerns, and Aspect Oriented Programming.  Avalon also uses several
        architectural patterns like the Singleton and the Factory.
      </p>
    </s1>
    <s1 title="The Avalon Patterns in short">
      <p>
        We provide you with a short description of the patterns first, with a
        detailed description of each pattern on a separate page.
      </p>

      <s2 title="Separation of Interface and Implementation">
        <p><b>Summary:</b> The Separation of Interface and Implementation is
        a core feature of the Java language. However, it is often misused so we
        list it as one of the Avalon patterns, and our use of it is extensive. 
        </p>
        <p><link href="guide-patterns-soii.html">
          More Information...
        </link></p>
      </s2>

      <s2 title="Inversion of Control">
        <p><b>Summary:</b> Avalon not only has an inheritance hierarchy, but also a
        Component hierarchy. In this hierarchy, the control of program flow is
        completely in the hands of the parent component(s), as soldiers in the
        military take orders from their officers.
        </p>
        <p><link href="guide-patterns-ioc.html">
          More Information...
        </link></p>
      </s2>

      <s2 title="Multi-Dimensional Separation of Concerns">
        <p><b>Summary:</b> You just read the introduction about patterns before
        reading about Avalon's patterns because that enables you to reuse the
        knowledge you gained about patterns in context other than that of
        Avalon. We do this with software as well. 
        </p>
        <p><link href="guide-patterns-soc.html">
          More Information...
        </link></p>
      </s2>

      <s2 title="Aspect-Oriented Programming">
        <p><b>Summary:</b> this is the next logical step ofter Separation of
        Concerns. Many concerns cannot be centrally addressed using the standard
        OOP mechanisms. Using AOP (which is an extension to OOP), we would be
        able to do so in a simple fashion. As there is no good AOP facility
        in java, we use "aspect marker interfaces" and COP instead.
        </p>
      </s2>

      <s2 title="Component-Oriented Programming">
        <p><b>Summary:</b> The Avalon framework promotes black-box reuse at
        every level. Doing so is commonly known as COP. This is so important
        in Avalon we devote an
        <link href="guide-cop-what-is.html">
        entire section
        </link>
        to it.
        </p>
      </s2>
    </s1>

  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.1 $ $Date: 2006-08-08 23:17:20 $
    </legal>
  </footer>
</document>
